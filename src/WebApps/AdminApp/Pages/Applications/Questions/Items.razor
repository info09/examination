@page "/app/questions"
@using AdminApp.Components
@using AdminApp.Services.Interfaces
@using Examination.Shared.Enums
@using Examination.Shared.Questions
@using Examination.Shared.SeedWorks
@inject IQuestionService QuestionService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">Question</MudText>
<MudGrid>
    <MudItem xs="12" sm="12" md="12">
        <MudCard Elevation="25" Style="height:100%;">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Link="/app/questions/new" Color="Color.Primary">Create</MudButton>

                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent Class="px-0">
                <MudGrid>
                    <MudItem xs="12" md="12">
                        <MudTable Items="@Elements" FixedHeader="true" FixedFooter="false" Height="400px">
                            <HeaderContent>
                                <MudTh>Content</MudTh>
                                <MudTh>Level</MudTh>
                                <MudTh>Type</MudTh>
                                <MudTh>Category</MudTh>
                                <MudTh>Date Create</MudTh>
                                <MudTh></MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Name">@context.Content</MudTd>
                                <MudTd DataLabel="Name">@context.Level</MudTd>
                                <MudTd DataLabel="Name">@(context.QuestionType == QuestionType.SingleSelection?"Single":"Multiples") </MudTd>
                                <MudTd DataLabel="Name">@context.CategoryName</MudTd>
                                <MudTd DataLabel="Name">@context.DateCreated.ToLocalTime().ToString("dd/MM/yyyy hh:mm")</MudTd>
                                <MudTd>
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="()=>NavigateToEdit(context.Id)" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" Class="ma-2" />
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="async ()=>await OnDeleteTask(context.Id)" Variant="Variant.Filled" Color="Color.Error" Size="Size.Large" Class="ma-2" />

                                </MudTd>
                            </RowTemplate>

                            <PagerContent>
                                <Pagination MetaData="MetaData" Spread="5" SelectedPage="SelectedPage"></Pagination>
                            </PagerContent>
                        </MudTable>
                    </MudItem>
                </MudGrid>


            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

<MudOverlay Visible="loading" DarkBackground="true" Absolute="true">
    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
</MudOverlay>

@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }
    [CascadingParameter]
    private Error Error { set; get; }

    public bool loading = false;

    private string DeletedId { get; set; }

    private List<QuestionDto> Elements { get; set; } = new List<QuestionDto>();
    public MetaData MetaData { get; set; } = new MetaData();

    public QuestionSearch QuestionSearch = new QuestionSearch();

    protected override async Task OnInitializedAsync()
    {
        await GetQuestion();
    }

    private void NavigateToEdit(string id)
    {
        NavigationManager.NavigateTo($"/app/questions/details/{id}");

    }

    private async Task OnDeleteTask(string deletedId)
    {
        
        DeletedId = deletedId;
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to delete these records? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<ConfirmationDialog>("Delete", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            await QuestionService.DeleteAsync(DeletedId);
            Snackbar.Add("Delete success", Severity.Success);
            await GetQuestion();
        }}

    private async Task SelectedPage(int page)
    {
        QuestionSearch.PageNumber = page;
        await GetQuestion();
    }

    private async Task GetQuestion()
    {
        loading = true;
        try
        {
            var paginationResponse = await QuestionService.GetQuestionsPagingAsync(QuestionSearch);
            Elements = paginationResponse.ResultObj.Items;
            MetaData = paginationResponse.ResultObj.MetaData;
            loading = false;
        }
        catch (Exception ex)
        {
            Error.ProcessError(ex);
            loading = false;
        }
    }
}
